name: Helsa consulting room CI
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_CONSULTING_ROOM }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_CONSULTING_ROOM }}
on:
  push:
    branches: [main]
    paths:
      - "src/apps/helsa/consulting-room/**"
  pull_request:
    branches: [main]
    types: [opened,synchronize,reopened]
    paths:
      - "src/apps/helsa/consulting-room/**"
  workflow_dispatch:
jobs:
  avoid_reduncy:
    runs-on: ubuntu-22.04
    steps:
      - name: Cancel Previous Redundant Builds
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          cache: 'npm'
          node-version: '16.14.2'
      - name: Install dependencies üì¶
        run: npm ci --loglevel=error
      - name: Lint üîç
        run: npm run lint -w @helsa/consulting-room
      - name: Build üèóÔ∏è
        run: |
            npm run build -w @ducen/core
            npm run build -w @ducen/client
            npm run build -w @ducen/ui-web
            npm run build -w @helsa/modules
            npm run build -w @helsa/consulting-room
      - name: Unit tests üß™
        run: npm run test -w @helsa/consulting-room
      - name: Create env file for E2E tests üß™
        run: |
            cd ./src/apps/helsa/consulting-room
            touch .env
            echo "${{ secrets.DEV_CONSULTING_ROOM_ENV }}" | base64 --decode > .env
      - name: Start Docker Compose üê≥
        run: docker-compose run --rm -d --service-ports helsa-consulting-room
      - name: Wait for API to start
        run: sleep 5
      - name: E2E tests üß™
        run: npm run test:e2e -w @helsa/consulting-room
  deploy:
    needs: [build]
    runs-on: ubuntu-22.04
    if: ${{ github.ref == 'refs/heads/main'}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull vercel
        run: vercel  pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN_CONSULTING_ROOM }}
      - name: Build Vercel Artifact
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN_CONSULTING_ROOM }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN_CONSULTING_ROOM }}
