type AddressPoint {
  longitude: Float
  latitude: Float
}
type UserAddress {
  country: String
  city: String
  street: String
  zipCode: String
  coordinates: AddressPoint
}

type UserConfiguration {
  timezone: String
  lang: String
  theme: String
}

type UserName {
  firstName: String
  lastName: String
}

type User {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: UserName
  gender: String
  email: String
  phoneNumber: String
  birthDate: DateTime
  photo: String
  address: UserAddress
  configuration: UserConfiguration
}

type LoginUser {
  user: User!
  token: String!
}

type RecommendedHabit {
  habit: String
  reason: String
}

input AddressPointRegister {
  longitude: Float
  latitude: Float
}
input UserAddressRegister {
  country: String
  city: String
  street: String
  zipCode: String
  coordinates: AddressPointRegister
}

input UserConfigurationRegister {
  timezone: String
  lang: String
  theme: String
}
input UserNameRegister {
  firstName: String
  lastName: String
}
"""
UserRegister is the input to register a new user
"""
input UserRegister {
  id: String
  name: UserNameRegister # Name of the user divided in first and last name
  gender: String
  password: String
  email: String
  birthDate: DateTime
  photo: String
  phoneNumber: String
  address: UserAddressRegister
  role: String
  configuration: UserConfigurationRegister
}

type Subscription {
  userRegistered: User
}

type Mutation {
  userRegister(user: UserRegister): Void
  uploadProfileImage(file: Upload, name: String, type: String): Void
  saveKnowledgeBase(knowledgeBase: String): Void
}

type Query {
  """
  Login user return the user and the authorization token
  """
  login(identifier: String, password: String): LoginUser
  """
  Generate habits for the user based on the user's profile using Llama3 API
  """
  habits: [RecommendedHabit]
}
