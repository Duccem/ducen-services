enum AppointmentStatus {
  SCHEDULED
  RESCHEDULED
  CONFIRMED
  CANCELED
  LATE
  WAITING_FOR_PATIENT
  WAITING_FOR_DOCTOR
  STARTED
  FINISHED
}
enum AppointmentDiagnosticTreatmentType {
  SURGERY
  MEDICATION,
  PHYSIOTHERAPY,
  NO_TREATMENT,
}
enum AppointmentTestType {
  BLOOD_TEST
  URINE_TEST
  XRAY
}
type AppointmentRoom {
  token: String
  room: String
  url: String
}
type AppointmentRating {
  rate: Int
  comment: String
}
type AppointmentTelemetry {
  weight: Float,
  height: Float,
  imc: Float,
  bloodPressure: Float,
  heartRate: Float,
}
type AppointmentDiagnosticTreatmentMedication {
  name: String
  dose: String
  frequency: String
  compounds: [String]
}
type AppointmentDiagnosticTreatment {
  type: AppointmentDiagnosticTreatmentType
  description: String
  instructions: String
  initDate: DateTime
  endDate: DateTime
  medications: [AppointmentDiagnosticTreatmentMedication]
}
type AppointmentDiagnostic {
  description: String
  code: String
  treatment: AppointmentDiagnosticTreatment
}
type AppointmentTestAttribute {
  category: String
  name: String
  unit: String
  metric: String
  referenceRange: String
}
type AppointmentTest {
  type: AppointmentTestType
  date: DateTime
  attributes: [AppointmentTestAttribute]
  laboratory: String
}

type AppointmentFile {
  type: String
  url: String
  name: String
  description: String
}
interface AppointmentRecipe {
  type: String
  date: DateTime
}

type AppointmentRecipePrescription implements AppointmentRecipe {
  type: String
  date: DateTime
  instructions: [String]
  medications: [String]
}

type AppointmentRecipeTest implements AppointmentRecipe {
  type: String
  date: DateTime
  exams: [String]
}

type AppointmentRecipeConsultation implements AppointmentRecipe {
  type: String
  date: DateTime
  reason: String
  observations: String
}

type Appointment {
  id: String
  patientId: String
  doctorId: String
  type: String
  initDate: DateTime
  endDate: DateTime
  status: AppointmentStatus
  room: AppointmentRoom
  rating: AppointmentRating
  telemetry: AppointmentTelemetry
  diagnostic: AppointmentDiagnostic
  reviewedTests: [AppointmentTest]
  documents: [AppointmentFile]
  recipes: [AppointmentRecipe]
  createdAt: DateTime
  updatedAt: DateTime
}

input AppointmentRegister {
  appointmentId: String
  patientId: String
  doctorId: String
  type: String
  initDate: DateTime
  endDate: DateTime
}

type Mutation {
  scheduleAppointment(data: AppointmentRegister!): Void
  reScheduleAppointment(appointmentId: String!, initDate: DateTime, endDate: DateTime): Void
  confirmAppointment(appointmentId: String!): Void
  cancelAppointment(appointmentId: String!, reason: String!): Void
  startAppointment(appointmentId: String!): Void
  userEnterAppointment(appointmentId: String!, whoEnter: String): Void
  userLeaveAppointment(appointmentId: String!, whoLeave: String): Void
  finishAppointment(appointmentId: String!): Void
}

type Query {
  getPatientAppointments(patientId: String!, pagination: Pagination): [Appointment]
}
